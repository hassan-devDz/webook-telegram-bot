const { Telegraf } = require("telegraf");
const { PrismaClient } = require("@prisma/client");
const _ = require("lodash");
const express = require("express");
const cors = require("cors");
const config = require("./config");
const bot = require("./bot");
// ŸÅŸä ŸÖŸÑŸÅ app.js ÿ£Ÿà ÿ≠Ÿäÿ´ Ÿäÿ™ŸÖ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
const eventService = require('./services/eventService');


// ÿ•ŸÜÿ¥ÿßÿ° Express app
const app = express();

// ÿ•ŸÜÿ¥ÿßÿ° instances
const prisma = new PrismaClient();
const telegramBot = new Telegraf(config.bot.token);

// Express middleware
app.use(cors(config.api.cors));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Rate limiting
if (config.isProduction()) {
  const rateLimit = require("express-rate-limit");
  app.use(rateLimit(config.rateLimit));
}

// ÿØŸÖÿ¨ ŸÖŸÜÿ∑ŸÇ ÿßŸÑÿ®Ÿàÿ™
bot(telegramBot);

// ÿ™ÿ¥ÿ∫ŸäŸÑ Express Ÿà Telegraf
const startServer = async () => {
  try {
    // ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    await prisma.$connect();
    console.log(`Database connected successfully [${config.app.env}]`);

    // ÿ™ÿ¥ÿ∫ŸäŸÑ Express
    app.listen(config.app.port, () => {
      console.log(`API server running on port ${config.app.port}`);
      console.log(`Environment: ${config.app.env}`);
      console.log(`Timezone: ${config.app.timezone}`);
    });

    // ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™

    console.log(
      `Telegram bot @${config.bot.username} started successfully`,
      "admin",
      config.app.adminId
    );

    if (config.app.adminId) {
      // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ± ŸÑŸÑŸÖÿ¥ÿ±ŸÅ ÿπŸÜÿØ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
      try {
        await telegramBot.telegram.sendMessage(
          config.app.adminId,
          `üöÄ Bot restarted successfully\n` +
            `Environment: ${config.app.env}\n` +
            `Time: ${config.time.format(new Date())}`
        );
      } catch (error) {
        console.error(
          "Could not send startup notification to admin:",
          error.message
        );
      }
    }

    // ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿ®ÿ¥ŸÉŸÑ ŸÜÿ∏ŸäŸÅ
    const gracefulShutdown = async () => {
      console.log("Received shutdown signal");

      // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ± ŸÑŸÑŸÖÿ¥ÿ±ŸÅ ÿπŸÜÿØ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
      if (config.app.adminId) {
        try {
          await telegramBot.telegram.sendMessage(
            config.app.adminId,
            `üîÑ Bot is shutting down\n` +
              `Time: ${config.time.format(new Date())}`
          );
        } catch (error) {
          console.error(
            "Could not send shutdown notification to admin:",
            error.message
          );
        }
      }

      await Promise.all([telegramBot.stop("SIGTERM"), prisma.$disconnect()]);

      process.exit(0);
    };
    // ÿ®ÿØÿ° ÿÆÿØŸÖÿ© ÿßŸÑŸÅÿπÿßŸÑŸäÿßÿ™
    await eventService.initialize();

    await telegramBot.launch();
    // ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÖÿπÿßŸÑÿ¨ÿßÿ™ ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ
    const signals = ["SIGINT", "SIGTERM", "SIGQUIT"];
    signals.forEach((signal) => {
      process.once(signal, () => {
        console.log(`Received ${signal} signal`);
        gracefulShutdown();
      });
    });
  } catch (error) {
    console.error("Startup Error:", error);

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ± ŸÑŸÑŸÖÿ¥ÿ±ŸÅ ŸÅŸä ÿ≠ÿßŸÑÿ© ÿßŸÑÿÆÿ∑ÿ£
    if (config.app.adminId) {
      try {
        await telegramBot.telegram.sendMessage(
          config.app.adminId,
          `‚ùå Bot startup error\n` +
            `Error: ${error.message}\n` +
            `Time: ${config.time.format(new Date())}`
        );
      } catch (adminError) {
        console.error(
          "Could not send error notification to admin:",
          adminError.message
        );
      }
    }

    process.exit(1);
  }
};

// ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©
process.on("uncaughtException", async (error) => {
  console.error("Uncaught Exception:", error);

  if (config.app.adminId) {
    try {
      await telegramBot.telegram.sendMessage(
        config.app.adminId,
        `‚ö†Ô∏è Uncaught Exception\n` +
          `Error: ${error.message}\n` +
          `Time: ${config.time.format(new Date())}`
      );
    } catch (adminError) {
      console.error(
        "Could not send error notification to admin:",
        adminError.message
      );
    }
  }

  process.exit(1);
});

process.on("unhandledRejection", async (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);

  if (config.app.adminId) {
    try {
      await telegramBot.telegram.sendMessage(
        config.app.adminId,
        `‚ö†Ô∏è Unhandled Promise Rejection\n` +
          `Reason: ${reason}\n` +
          `Time: ${config.time.format(new Date())}`
      );
    } catch (adminError) {
      console.error(
        "Could not send error notification to admin:",
        adminError.message
      );
    }
  }
});

startServer();
